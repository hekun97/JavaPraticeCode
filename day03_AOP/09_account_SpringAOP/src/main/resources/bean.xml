<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置原始的accountService-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImplPrimitive">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!--配置Dao对象-->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <!-- set方法注入 QueryRunner -->
        <property name="runner" ref="runner"></property>
        <!--更换使用工具类ConnectionUtil中的数据库连接-->
        <!--set方式注入 存入一个和本地线程绑定的数据库连接-->
        <property name="connectionUtil" ref="connectionUtil"></property>
    </bean>

    <!--配置QueryRunner,记得配置为多例对象，以保证每次使用的dao都是新的，避免干扰造成线程安全问题-->
    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <!--此处忘了为何不在此处引入数据源了-->
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--set方法注入 连接数据库的必备信息-->
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/springTest"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root1234"></property>
    </bean>

    <!-- 配置存储数据库连接的工具类 -->
    <bean id="connectionUtil" class="com.itheima.utils.ConnectionUtil">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置事务管理相关的工具类 -->
    <bean id="transactionManagerUtil" class="com.itheima.utils.TransactionManagerUtil">
        <property name="connectionUtil" ref="connectionUtil"></property>
    </bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点，id为切入点名称，expression为切入点表达式，表明需被增强方法的位置，这里业务层service下所有的实现类中的方法都会被增强-->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <!--配置切面，id：是给切面提供一个唯一标识 ref：是指定通知类bean的Id-->
        <aop:aspect id="txAdvice" ref="transactionManagerUtil">
            <!-- 配置通知的类型，并且建立通知方法和切入点方法的关联 aop:before：表示前置通知，method：用于指定Logger类中哪个方法是前置通知,
            pointcut-ref：用于指定使用那个切入点位置，是对业务层中哪些方法增强 -->
            <!--配置前置通知：开启事务-->
            <aop:before method="beginTransaction" pointcut-ref="pt1"></aop:before>
            <!--配置后置通知：提交事务-->
            <aop:after-returning method="commitTransaction" pointcut-ref="pt1"></aop:after-returning>
            <!--配置异常通知：回滚事务-->
            <aop:after-throwing method="rollbackTransaction" pointcut-ref="pt1"></aop:after-throwing>
            <!--配置最终通知：释放连接-->
            <aop:after method="release" pointcut-ref="pt1"></aop:after>
        </aop:aspect>
    </aop:config>
</beans>