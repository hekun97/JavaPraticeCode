<?xml version="1.0" encoding="UTF-8"?>
<!--在第二步时配置事务的通知时记得修改前面的引用，以便后续能够配置事务的通知和AOP-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置业务层-->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <!--需要set方式依赖注入持久层对象-->
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <!--在持久层accountDao中配置数据源对象。-->
    <!--因为子类继承了父类的属性与方法，所以直接在子类中配置数据源dataSource，也可以创建jdbcTemplate对象-->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <!--创建jdbcTemplate时需要使用的数据源对象dataSource-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!--数据源对象中需要配置的数据-->
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/test2"></property>
        <property name="username" value="root"></property>
        <property name="password" value="root1234"></property>
    </bean>

    <!-- spring中基于XML的声明式事务控制配置步骤
            1、配置事务管理器
            2、配置事务的通知
                    此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的
                    使用tx:advice标签配置事务通知
                        属性：
                            id：给事务通知起一个唯一标识
                            transaction-manager：给事务通知提供一个事务管理器引用
            3、配置AOP中的通用切入点表达式
            4、建立事务通知和切入点表达式的对应关系
            5、配置事务的属性
                   是在事务的通知tx:advice标签的内部配置

         -->
    <!-- 1、配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置事务管理器时需要使用的数据源对象dataSource-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 2、配置事务的通知，属性，id：给事务通知起一个唯一标识，transaction-manager：给事务通知提供一个事务管理器引用-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 5、配置事务的属性
                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。
                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。
                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。
                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。
                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。
                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。
        -->
        <tx:attributes>
            <!--增删改方法需要事务支持，并可读写数据库数据-->
            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <!--其它的所有查询方法名需要以find开头，然后不开启事务支持，并只读数据库数据-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!-- 配置aop-->
    <aop:config>
        <!-- 3、配置切入点表达式，这里表示对业务层service下所有的实现类进行增强-->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <!--4、建立切入点表达式和事务通知的对应关系，属性 advice-ref：所对应的事务通知，pointcut-ref：所对应的切入点表达式-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>
</beans>